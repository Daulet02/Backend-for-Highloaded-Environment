[debug] 
[debug] Initial source changes: 
[debug] 	removed:Set()
[debug] 	added: Set(C:\Users\user\Desktop\Scala_Backend\week_5\src\main\scala\SecondMain.scala)
[debug] 	modified: Set()
[debug] Invalidated products: Set()
[debug] External API changes: API Changes: Set()
[debug] Modified binary dependencies: Set()
[debug] Initial directly invalidated classes: Set()
[debug] 
[debug] Sources indirectly invalidated by:
[debug] 	product: Set()
[debug] 	binary dep: Set()
[debug] 	external source: Set()
[debug] All initially invalidated classes: Set()
[debug] All initially invalidated sources:Set(C:\Users\user\Desktop\Scala_Backend\week_5\src\main\scala\SecondMain.scala)
[debug] Initial set of included nodes: 
[info] Compiling 1 Scala source to C:\Users\user\Desktop\Scala_Backend\week_5\target\scala-2.13\classes ...
[debug] Getting org.scala-sbt:compiler-bridge_2.13:1.3.5:compile for Scala 2.13.3
[debug] Getting org.scala-sbt:compiler-bridge_2.13:1.3.5:compile for Scala 2.13.3
[debug] [zinc] Running cached compiler 2ee7ad0c for Scala compiler version 2.13.3
[debug] [zinc] The Scala compiler is invoked with:
[debug] 	-bootclasspath
[debug] 	C:\Users\user\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala-library\2.13.3\scala-library-2.13.3.jar
[debug] 	-classpath
[debug] 	C:\Users\user\Desktop\Scala_Backend\week_5\target\scala-2.13\classes;C:\Users\user\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\io\circe\circe-core_2.13\0.12.3\circe-core_2.13-0.12.3.jar;C:\Users\user\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\io\circe\circe-generic_2.13\0.12.3\circe-generic_2.13-0.12.3.jar;C:\Users\user\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\io\circe\circe-parser_2.13\0.12.3\circe-parser_2.13-0.12.3.jar;C:\Users\user\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\io\circe\circe-numbers_2.13\0.12.3\circe-numbers_2.13-0.12.3.jar;C:\Users\user\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\typelevel\cats-core_2.13\2.0.0\cats-core_2.13-2.0.0.jar;C:\Users\user\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\com\chuusai\shapeless_2.13\2.3.3\shapeless_2.13-2.3.3.jar;C:\Users\user\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\io\circe\circe-jawn_2.13\0.12.3\circe-jawn_2.13-0.12.3.jar;C:\Users\user\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\typelevel\cats-macros_2.13\2.0.0\cats-macros_2.13-2.0.0.jar;C:\Users\user\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\typelevel\cats-kernel_2.13\2.0.0\cats-kernel_2.13-2.0.0.jar;C:\Users\user\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\typelevel\jawn-parser_2.13\0.14.2\jawn-parser_2.13-0.14.2.jar
[debug] Scala compilation took 8.7589546 s
[info] Done compiling.
[debug] Invalidating (transitively) by inheritance from SecondMain.Check...
[debug] Initial set of included nodes: SecondMain.Check
[debug] Including SecondMain.Product by SecondMain.Check
[debug] Invalidated by transitive inheritance dependency: Set(SecondMain.Product, SecondMain.Check)
[debug] Change NamesChange(SecondMain.Check,ModifiedNames(changes = UsedName(##,[Default]), UsedName(clone,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(notify,[Default]), UsedName(finalize,[Default]), UsedName(wait,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(Check,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(notifyAll,[Default]), UsedName(==,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]))) invalidates 2 classes due to The SecondMain.Check has the following regular definitions changed:
[debug] 	UsedName(##,[Default]), UsedName(clone,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(notify,[Default]), UsedName(finalize,[Default]), UsedName(wait,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(Check,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(notifyAll,[Default]), UsedName(==,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]).
[debug] 	> by transitive inheritance: Set(SecondMain.Product, SecondMain.Check)
[debug] 	> 
[debug] 	> 
[debug]         
[debug] Invalidating (transitively) by inheritance from SecondMain.Product...
[debug] Initial set of included nodes: SecondMain.Product
[debug] Invalidated by transitive inheritance dependency: Set(SecondMain.Product)
[debug] Change NamesChange(SecondMain.Product,ModifiedNames(changes = UsedName(##,[Default]), UsedName(clone,[Default]), UsedName(tupled,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(notify,[Default]), UsedName(finalize,[Default]), UsedName(productPrefix,[Default]), UsedName(productElementNames,[Default]), UsedName($init$,[Default]), UsedName(productName,[Default]), UsedName(copy,[Default]), UsedName(wait,[Default]), UsedName(hashCode,[Default]), UsedName(SecondMain;Product;init;,[Default]), UsedName(copy$default$2,[Default]), UsedName(Product,[Default]), UsedName(productIterator,[Default]), UsedName(productArity,[Default]), UsedName(eq,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$1,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(canEqual,[Default]), UsedName(synchronized,[Default]), UsedName(curried,[Default]), UsedName(notifyAll,[Default]), UsedName(==,[Default]), UsedName(isInstanceOf,[Default]), UsedName(totalCost,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(amountAndCost,[Default]), UsedName(apply,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$3,[Default]))) invalidates 1 classes due to The SecondMain.Product has the following regular definitions changed:
[debug] 	UsedName(##,[Default]), UsedName(clone,[Default]), UsedName(tupled,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(notify,[Default]), UsedName(finalize,[Default]), UsedName(productPrefix,[Default]), UsedName(productElementNames,[Default]), UsedName($init$,[Default]), UsedName(productName,[Default]), UsedName(copy,[Default]), UsedName(wait,[Default]), UsedName(hashCode,[Default]), UsedName(SecondMain;Product;init;,[Default]), UsedName(copy$default$2,[Default]), UsedName(Product,[Default]), UsedName(productIterator,[Default]), UsedName(productArity,[Default]), UsedName(eq,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$1,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(canEqual,[Default]), UsedName(synchronized,[Default]), UsedName(curried,[Default]), UsedName(notifyAll,[Default]), UsedName(==,[Default]), UsedName(isInstanceOf,[Default]), UsedName(totalCost,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(amountAndCost,[Default]), UsedName(apply,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$3,[Default]).
[debug] 	> by transitive inheritance: Set(SecondMain.Product)
[debug] 	> 
[debug] 	> 
[debug]         
[debug] Invalidating (transitively) by inheritance from SecondMain...
[debug] Initial set of included nodes: SecondMain
[debug] Invalidated by transitive inheritance dependency: Set(SecondMain)
[debug] Change NamesChange(SecondMain,ModifiedNames(changes = UsedName(##,[Default]), UsedName(ans,[Default]), UsedName(args,[Default]), UsedName(clone,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(filename,[Default]), UsedName(notify,[Default]), UsedName(main,[Default]), UsedName(finalize,[Default]), UsedName($init$,[Default]), UsedName(wait,[Default]), UsedName(hashCode,[Default]), UsedName(Product,[Default]), UsedName(eq,[Default]), UsedName(Check,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(lines,[Default]), UsedName(delayedInit,[Default]), UsedName(SecondMain,[Default]), UsedName(json,[Default]), UsedName(synchronized,[Default]), UsedName(line,[Default]), UsedName(keyVal,[Default]), UsedName(notifyAll,[Default]), UsedName(==,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(executionStart,[Default]))) invalidates 1 classes due to The SecondMain has the following regular definitions changed:
[debug] 	UsedName(##,[Default]), UsedName(ans,[Default]), UsedName(args,[Default]), UsedName(clone,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(filename,[Default]), UsedName(notify,[Default]), UsedName(main,[Default]), UsedName(finalize,[Default]), UsedName($init$,[Default]), UsedName(wait,[Default]), UsedName(hashCode,[Default]), UsedName(Product,[Default]), UsedName(eq,[Default]), UsedName(Check,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(lines,[Default]), UsedName(delayedInit,[Default]), UsedName(SecondMain,[Default]), UsedName(json,[Default]), UsedName(synchronized,[Default]), UsedName(line,[Default]), UsedName(keyVal,[Default]), UsedName(notifyAll,[Default]), UsedName(==,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(executionStart,[Default]).
[debug] 	> by transitive inheritance: Set(SecondMain)
[debug] 	> 
[debug] 	> 
[debug]         
[debug] New invalidations:
[debug] 	Set()
[debug] Initial set of included nodes: 
[debug] Previously invalidated, but (transitively) depend on new invalidations:
[debug] 	Set()
[debug] No classes were invalidated.
